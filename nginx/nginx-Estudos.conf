#Arquivo de configuração do NGINX
#Colocar ";" depois de cada comando

server { #Montar um servidor - Adicionaremos as conf dentro
    listen 80; #Ouvir e servir qualquer coisa por essa porta

    #Caminho que vamos servir o arquivo do front
    location / { #Ouça qualquer coisa a partir do / -> app.get('/') <-- exemplo
    #A ideia aqui é: Qualquer rota a partir do barra, vai aplicar as configurações que colocarmos aqui dentro
        root /var/www/html; #endereço padrão - mas pod ser qualquer um
        index index.html; #Se receber uma chamada para index, servir o index.html que estará dentro da pasta acima
        #index.html é o do front após o build

        #Na configuração de cima ao passar algo como "/banana" na url, ele vai buscar o arquivo:
        #/var/www/html/banana/index.html, porém, usamos uma single page aplication, mexemos com rotas dentro da pagina
        #Esse arquivo, esse local acima, não existe, então aparecerá 404, pq ele não entrou na rota da pagina e sim buscou um arquivo
        #O que temos que fazer é passar uma configuração para que ele retorna o index.html caso não ache outro arquivo
        #Isso é chamado de fallback -> volta ao index.html caso não ache o arquivo
        #Como estamos usando react-router-dom provavelmente, queremos a rota dentro do index.html, por isso queremos sempre ele
        try_files $uri $uri/ /index.html; #Leia-se tenta buscar os arquivos $URI, se for pasta, entra na pasta $URI/, se não achar, devolver o index.html
        #Pronto, agora sempre que passar uma url ($URI) e ele não achar o arquivo ($URI/), ele vai retornar o index.html
    }

    #Outro problema é que a AWS só disponibiliza algumas portas por padrão, como a 80
    #Mas, nosso back tá na porta 5000, como vamos acessar essa porta? Não teria como fazer isso de forma normal usando o servidor da AWS
    #O que vamos fazer é, toda vez que acessarmos a rota do /api/algo...  do front, O nosso nginx vai REDIRECIONAR para outra porta
    #Ou seja, vamos fazer um acesso a rota 80, através do /api/ lá do REACT_APP_BASE_URL (front)
    #E ele vai redirecionar para outra porta, a porta 5000 do back, por exemplo
    location /api/ {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_pass http://node_drivenops_app:5000/; #Ele que redireciona
        #O nome do http://<nameDoContainerDoBack>:PORT/ é o nome do back dentro do docker-compose e a porta é a porta do expose
    }

    #Essa tecnica é chamada de proxy Reverse
    #Esses arquivos _set_header são coisas que vem no header de forma padrão, usando esses comandos ele garante redirecionar junto, evitando erros bobos.
}